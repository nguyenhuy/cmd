---
description: 
globs: *.swift
alwaysApply: false
---
We leverage dependency injection to help isolate code, promote testing, reduce cognitive load, and help with faster build time and SwiftUI previews.

All code that serves a clear separate purpose should be isolated in a module

### Services & Service interfaces
All code that is non UI facing and should be mocked for tests should have an interface in `./app/modules/serviceInterfaces` and an implemention in `./app/modules/services`.
The interface defines a public protocol, a mock, and the required dependency boilerplate. It should contain tests for the mock.
The service target defines the implementation and should be well tested with unit tests.
All external modules, other than the `App` module should not depend on the implementation.

See the File Suggestion Service for illustration (`./app/modules/serviceInterfaces/FileSuggestionServiceInterface` and `./app/modules/services/FileSuggestionService`)

### Foundation
Code that is non UI facing and should not be mocked for tests should be defined under `./app/modules/foundations`. Foundation modules are expected to have no dependencies, or just a few.

### Features
Code that is UI facing should be a feature. A features should correspond roughly to a "screen", or part of a screen when the screen is too large / complex.
Features are expected to be tested with a mix of standard unit tests, and using ViewInspector.
