// Copyright Xcompanion. All rights reserved.
// Licensed under the XXX License. See License.txt in the project root for license information.

import ConcurrencyFoundation
import Foundation
import JSONFoundation
import ServerServiceInterface
import ToolFoundation

// MARK: - LLMModel

/// The LLM model used to generate a message.
public struct LLMModel: Hashable, Identifiable, CaseIterable, Sendable {
  public init?(rawValue: String) {
    if let model = Self.allCases.first(where: { $0.id == rawValue }) {
      self = model
    } else {
      return nil
    }
  }

  init(displayName: String, id: String) {
    self.displayName = displayName
    self.id = id
  }

  public static let claudeSonnet37 = LLMModel(displayName: "claude-3.7-sonnet", id: "claude-3-7-sonnet-20250219")
  public static let claudeSonnet40 = LLMModel(displayName: "claude-4.0-sonnet", id: "claude-sonnet-4-20250514")
  public static let gpt4o = LLMModel(displayName: "gpt-4o", id: "gpt-4o")
  public static let gpt4o_mini = LLMModel(displayName: "gpt-4o-mini", id: "gpt-4o-mini")
  public static let o1 = LLMModel(displayName: "o1", id: "o1-preview")

  public static var allCases: [LLMModel] {
    [.claudeSonnet40, .claudeSonnet37, .gpt4o, .gpt4o_mini, .o1]
  }

  public let displayName: String
  public let id: String

}

// MARK: - AssistantMessage

/// One message generated by the assistant.
public struct AssistantMessage: Sendable {
  public let content: [AssistantMessageContent]

  public init(content: [AssistantMessageContent]) {
    self.content = content
  }
}

// MARK: - AssistantMessageContent

/// The content representing one part of the message (usually messages have only one part, but they can have more).
public enum AssistantMessageContent: Sendable {
  case text(_ message: MutableCurrentValueStream<TextContentMessage>)
  case tool(_ message: ToolUseMessage)
}

// MARK: - TextContentMessage

/// A message containing text.
public struct TextContentMessage: Sendable {
  // MARK: Lifecycle

  public init(content: String, deltas: [String] = []) {
    self.content = content
    self.deltas = deltas
  }

  // MARK: Public

  /// The content of the message. If the message is being streamed, this content might be incomplete.
  public let content: String
  /// When the message is being streamed, the deltas represent all the changes to the content that have been received.
  public let deltas: [String]
}

public typealias ToolUseRequestMessage = Schema.ToolUseRequest

// MARK: - ToolUseMessage

public struct ToolUseMessage: Sendable {
  public let toolUse: any ToolUse

  public init(toolUse: any ToolUse) {
    self.toolUse = toolUse
  }

  public var id: String { toolUse.toolUseId }
  public var toolName: String { toolUse.toolName }
  public var input: any Codable { toolUse.input }
}

extension Schema.ToolUseRequest {

  // TODO: Look at avoiding this decoding.
  public init(
    name: String,
    anyInput: any Codable,
    id: String)
    throws
  {
    let data = try JSONEncoder().encode(anyInput)
    let json = try JSONDecoder().decode(JSON.self, from: data)
    self.init(name: name, input: json, id: id)
  }
}
