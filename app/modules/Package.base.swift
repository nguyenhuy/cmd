// swift-tools-version: 6.0
// The swift-tools-version declares the minimum version of Swift required to build this package.

// Package.swift is generated by running ./app/tools/dependencies/sync.sh. DO NOT MODIFY DIRECTLY.
// Local dependencies are automatically identified.
// 3rd party dependencies are manually added to the corresponding Module.swift files.
// New 3rd party dependencies should be added to Package.base.swift first.

import CompilerPluginSupport
import PackageDescription

extension Target {
  static func module(
    name: String,
    dependencies: [Target.Dependency],
    resources: [PackageDescription.Resource]? = nil,
    testDependencies: [Target.Dependency]? = nil,
    testExclude: [String] = [],
    testResources: [PackageDescription.Resource]? = nil,
    path: String)
    -> [Target]
  {
    let sourceTarget = Target.target(
      name: name,
      dependencies: dependencies,
      path: "\(path)/Sources",
      resources: resources)
    if let testDependencies {
      let testTarget = Target.testTarget(
        name: "\(name)Tests",
        dependencies: testDependencies + [Target.Dependency.byName(name: name)],
        path: "\(path)/Tests",
        exclude: testExclude,
        resources: testResources)
      return [sourceTarget, testTarget]
    } else {
      return [sourceTarget]
    }
  }

  static func macroModule(
    name: String,
    dependencies: [Target.Dependency],
    macroDependencies: [Target.Dependency] = [],
    testDependencies: [Target.Dependency]? = nil,
    path: String)
    -> [Target]
  {
    let pluginTarget = Target.target(
      name: name,
      dependencies: dependencies,
      path: "\(path)/Sources")
    let macroTarget = Target.macro(
      name: "\(name)Macro",
      dependencies: macroDependencies,
      path: "\(path)/Macro")
    if let testDependencies {
      let testTarget = Target.testTarget(
        name: "\(name)Tests",
        dependencies: testDependencies + [Target.Dependency.byName(name: name)],
        path: "\(path)/Tests")
      return [pluginTarget, macroTarget, testTarget]
    } else {
      return [pluginTarget, macroTarget]
    }
  }
}

var targets: [Target] = []

let package = Package(
  name: "Packages",
  platforms: [
    .macOS("15.2"),
  ],
  products: [
    .library(
      name: "App",
      targets: [
        "App",
      ]),
    .library(
      name: "AppExtension",
      targets: [
        "AppExtension",
      ]),
  ],
  dependencies: [
    .package(url: "https://github.com/appstefan/highlightswift", from: "1.1.0"),
    .package(url: "https://github.com/gsabran/Down", revision: "14309dd8781c7613063344727454ffbbebc8e8bd"),
    .package(url: "https://github.com/pointfreeco/swift-dependencies", from: "1.7.0"),
    .package(url: "https://github.com/sindresorhus/KeyboardShortcuts", from: "2.2.4"),
    .package(url: "https://github.com/tuist/XcodeProj", from: "9.1.0"),
    .package(url: "https://github.com/ukushu/Ifrit", from: "3.0.0"),
    // .package(url: "https://github.com/swiftlang/swift-syntax", from: "600.0.1"),
    // Use the pre-built swift-syntax for faster local builds. Doesn't work with tests.
    .package(path: "./pre-built/swift-syntax"),
    .package(url: "https://github.com/jamesrochabrun/SwiftOpenAI", from: "4.1.1"),
    .package(url: "https://github.com/gsabran/JSONScanner", from: "1.0.0"),
    .package(url: "https://github.com/MobileNativeFoundation/XCLogParser", from: "0.2.41"),

    // Testing dependencies:
    .package(url: "https://github.com/pointfreeco/swift-snapshot-testing", from: "1.18.0"),
    .package(url: "https://github.com/pointfreeco/swift-macro-testing", from: "0.6.2"),
  ],
  targets: targets)
