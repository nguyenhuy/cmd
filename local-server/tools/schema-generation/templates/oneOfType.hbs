public enum {{typeName}}: Codable, Sendable {
  {{#each cases}}
  case {{name}}(_ value: {{type}})
  {{/each}}

  private enum CodingKeys: String, CodingKey {
    case type = "{{typeKey}}"
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
    let type = try container.decode(String.self, forKey: .type)
    switch type {
      {{#each cases}}
      case {{{typeValue}}}:
        self = .{{name}}(try {{type}}(from: decoder))
      {{/each}}
      default:
        throw DecodingError.typeMismatch(String.self, DecodingError.Context(codingPath: decoder.codingPath, debugDescription: "Invalid type"))
    }
  }

  public func encode(to encoder: Encoder) throws {
    switch self {
      {{#each cases}}
      case .{{name}}(let value):
        try value.encode(to: encoder)
      {{/each}}
    }
  }
}